[{"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\App.js":"1","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\index.js":"3","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\components\\Login.js":"4","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\services\\User.js":"5","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\components\\Events.js":"6","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\services\\Events.js":"7","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\components\\SignUp.js":"8"},{"size":528,"mtime":1612300469540,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1612300469540,"results":"11","hashOfConfig":"10"},{"size":892,"mtime":1612401293536,"results":"12","hashOfConfig":"10"},{"size":1662,"mtime":1612401437301,"results":"13","hashOfConfig":"10"},{"size":422,"mtime":1612402259558,"results":"14","hashOfConfig":"10"},{"size":17738,"mtime":1612398179204,"results":"15","hashOfConfig":"10"},{"size":1133,"mtime":1612393735687,"results":"16","hashOfConfig":"10"},{"size":1613,"mtime":1612402462969,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nypkmw",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\App.js",[],"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\index.js",[],"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\components\\Login.js",[],["36","37"],"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\services\\User.js",[],"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\components\\Events.js",["38","39","40","41"],"import React, {useState, useEffect } from 'react'; \r\nimport {get_Events, put_Events, delete_Events,create_Event} from '../services/Events'; \r\nimport { AiFillEdit,AiFillDelete, AiFillPlusCircle} from \"react-icons/ai\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport '../css/EventsCss.css';\r\n\r\n\r\n\r\nexport default function Events(){\r\n    const [events,setEvents] = useState([]);\r\n    const[showEditModal, setShowEditModal] = useState(false);\r\n    const[showCreateModal,setShowCreateModal ] = useState(false);\r\n    const[showDetail,setShowDetail ] = useState(false);\r\n    const[eventSelected, setEvent] = useState([]);\r\n    const[nombre, setNombre] = useState();\r\n    const[categoria, setCategoria] = useState();\r\n    const[lugar, setLugar] = useState();\r\n    const[direccion, setDireccion] = useState();\r\n    const[presencial, setPresencial] = useState(false);\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n\r\n    useEffect(async () => {\r\n      fetchEvents()\r\n        \r\n    }, [])\r\n    async function fetchEvents(){\r\n      let data = await get_Events(); \r\n        console.log(data);\r\n        setEvents(data);\r\n        console.log(events);\r\n    }\r\n    async function createEvent(){\r\n      let new_event  = new Object(); \r\n      new_event.id = eventSelected.id\r\n      new_event.nombre = nombre; \r\n      new_event.categoria = categoria; \r\n      new_event.lugar = lugar; \r\n      new_event.direccion = direccion; \r\n      new_event.presencial =presencial;\r\n      new_event.fechaInicio = startDate.getFullYear()+\"-\"+ startDate.getMonth()+\"-\"+ startDate.getDate();\r\n      new_event.fechaFin = endDate.getFullYear()+\"-\"+ endDate.getMonth()+\"-\"+ endDate.getDate();\r\n      await create_Event(new_event); \r\n      fetchEvents()\r\n      setShowCreateModal(false); \r\n    }\r\n    async function editEvent(){\r\n      let new_event  = new Object(); \r\n      new_event.id = eventSelected.id\r\n      new_event.nombre = nombre; \r\n      new_event.categoria = categoria; \r\n      new_event.lugar = lugar; \r\n      new_event.direccion = direccion; \r\n      new_event.presencial =presencial;\r\n      new_event.fechaInicio = startDate.getFullYear()+\"-\"+ startDate.getMonth()+\"-\"+ startDate.getDate();\r\n      new_event.fechaFin = endDate.getFullYear()+\"-\"+ endDate.getMonth()+\"-\"+ endDate.getDate();\r\n      console.log(new_event); \r\n      await put_Events(new_event);\r\n      fetchEvents()\r\n      setShowEditModal(false); \r\n    }\r\n    async function deleteEvent(id){\r\n      console.log(id);\r\n      await delete_Events(id); \r\n      fetchEvents()\r\n    }\r\n\r\n    return(\r\n    <div>\r\n      <div className=\"container-fluid contenedor\">\r\n        <div className=\"row justify-content-center contenedor\">\r\n          <div className=\"col-auto contenedor\">\r\n          <button className=\"btn btn-danger\" onClick={() => setShowCreateModal(true)}> Crear evento</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        <table className=\"table\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th scope=\"col\">nombre</th>\r\n              <th scope=\"col\">categoria</th>\r\n              <th scope=\"col\">lugar</th>\r\n              <th scope=\"col\"></th>\r\n              <th scope=\"col\"></th>\r\n              <th scope=\"col\"></th>\r\n              \r\n            </tr>\r\n          </thead>\r\n\r\n           <tbody>\r\n               {events.map((d) =>(<tr key={d.id} >\r\n               <td onClick={() =>\r\n                {setEvent(d);\r\n                  setShowDetail(true)}}>{d.nombre}</td>\r\n               <td>{d.categoria}</td>\r\n               <td>{d.lugar}</td>\r\n               <td><button className=\"btn btn-danger \" type=\"button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\" onClick={() =>{\r\n                   deleteEvent(d.id);\r\n               }}\r\n              ><AiFillDelete/></button>\r\n                </td>\r\n               <td><button className=\"btn btn-success\" onClick={() =>{\r\n                   setEvent(d); \r\n                   setShowEditModal(true);\r\n               }}> <AiFillEdit/></button> </td>\r\n               <td><button className=\"btn btn-success\" onClick={() =>{\r\n                   setEvent(d); \r\n                   setShowDetail(true);\r\n               }}> <AiFillPlusCircle/></button> </td>\r\n               </tr>))}\r\n               \r\n          </tbody>\r\n        </table>\r\n        <Modal show={showEditModal} idEvent={eventSelected}>\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"modal-title\" id=\"addProductModalLabel\">\r\n                    Editar un evento\r\n              </h5>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"close\"\r\n                    data-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                    onClick={() => setShowEditModal(false)}\r\n                  >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                  <form>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputName\">Nombre</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputName\"\r\n                        placeholder = {eventSelected.nombre}\r\n                        onChange={(e) => setNombre(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputType\">Categoria</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.categoria}\r\n                        onChange={(e) => setCategoria(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputQuantity\">Lugar</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.lugar}\r\n                        onChange={(e) => setLugar(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Direccion</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.direccion}\r\n                        onChange={(e) => setDireccion(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Fecha Inicial</label>\r\n                      <DatePicker selected={startDate} onChange={date => setStartDate(date)} dateFormat=\"yyyy/MM/dd h:mm aa\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Fecha Final</label>\r\n                      <DatePicker selected={endDate} onChange={date => setEndDate(date)} dateFormat=\"yyyy/MM/dd h:mm aa\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Presencial</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.presencial}\r\n                        onChange={(e) => setPresencial(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger\"\r\n                    data-dismiss=\"modal\"\r\n                    onClick={() => setShowEditModal(false)}\r\n                  >\r\n                    Cancelar\r\n              </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-success\"\r\n                    onClick={() => editEvent()}\r\n                  >\r\n                    Editar Evento\r\n              </button>\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n            <Modal show={showCreateModal} idEvent={eventSelected}>\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"modal-title\" id=\"addProductModalLabel\">\r\n                    Crear un evento\r\n              </h5>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"close\"\r\n                    data-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                    onClick={() => setShowCreateModal(false)}\r\n                  >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                  <form>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputName\">Nombre</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputName\"\r\n                        onChange={(e) => setNombre(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputType\">Categoria</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setCategoria(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputQuantity\">Lugar</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setLugar(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Direccion</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setDireccion(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Fecha Inicial</label>\r\n                      <DatePicker selected={startDate} onChange={date => setStartDate(date)} dateFormat=\"yyyy/MM/dd h:mm aa\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Fecha Final</label>\r\n                      <DatePicker selected={endDate} onChange={date => setEndDate(date)} dateFormat=\"yyyy/MM/dd h:mm aa\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Presencial</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setPresencial(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger\"\r\n                    data-dismiss=\"modal\"\r\n                    onClick={() => setShowCreateModal(false)}\r\n                  >\r\n                    Cancelar\r\n              </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-success\"\r\n                    onClick={() => createEvent()}\r\n                  >\r\n                    Crear Evento\r\n              </button>\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n            <Modal show={showEditModal}>\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"modal-title\" id=\"addProductModalLabel\">\r\n                    Editar un evento\r\n              </h5>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"close\"\r\n                    data-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                    onClick={() => setShowEditModal(false)}\r\n                  >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                  <form>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputName\">Nombre</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputName\"\r\n                        placeholder = {eventSelected.nombre}\r\n                        onChange={(e) => setNombre(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputType\">Categoria</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.categoria}\r\n                        onChange={(e) => setCategoria(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputQuantity\">Lugar</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.lugar}\r\n                        onChange={(e) => setLugar(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Direccion</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.direccion}\r\n                        onChange={(e) => setDireccion(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Fecha Inicial</label>\r\n                      <DatePicker selected={startDate} onChange={date => setStartDate(date)} dateFormat=\"yyyy/MM/dd h:mm aa\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Fecha Final</label>\r\n                      <DatePicker selected={endDate} onChange={date => setEndDate(date)} dateFormat=\"yyyy/MM/dd h:mm aa\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <label htmlfor=\"inputPrice\">Presencial</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder = {eventSelected.presencial}\r\n                        onChange={(e) => setPresencial(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger\"\r\n                    data-dismiss=\"modal\"\r\n                    onClick={() => setShowEditModal(false)}\r\n                  >\r\n                    Cancelar\r\n              </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-success\"\r\n                    onClick={() => editEvent()}\r\n                  >\r\n                    Editar Evento\r\n              </button>\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n            <Modal show={showDetail}>\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"modal-title\">\r\n                    {eventSelected.nombre}\r\n              </h5>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"close\"\r\n                    data-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                    onClick={() => setShowDetail(false)}\r\n                  >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <p>Categoria:{eventSelected.categoria}</p>\r\n                    <p>Lugar:{eventSelected.lugar}</p>\r\n                    <p>Direccion:{eventSelected.direccion}</p>\r\n                    <p>Fecha Inicio:{eventSelected.fechaInicio}</p>\r\n                    <p>Fecha Final:{eventSelected.fechaFinal}</p>\r\n                    <p>Presencial:{eventSelected.presencial+\"\"}</p>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n\r\n      </div>\r\n    )\r\n}","C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\services\\Events.js",[],"C:\\Users\\juanc\\Desktop\\Proyecto0_Cloud\\frontend\\src\\components\\SignUp.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":25,"column":15,"nodeType":"48","endLine":28,"endColumn":6},{"ruleId":"46","severity":1,"message":"49","line":28,"column":8,"nodeType":"50","endLine":28,"endColumn":10,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":36,"column":24,"nodeType":"54","messageId":"55","endLine":36,"endColumn":36},{"ruleId":"52","severity":1,"message":"53","line":50,"column":24,"nodeType":"54","messageId":"55","endLine":50,"endColumn":36},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'fetchEvents'. Either include it or remove the dependency array.","ArrayExpression",["58"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [fetchEvents]",{"range":"61","text":"62"},[1096,1098],"[fetchEvents]"]